Indentation
>>		indent line one sw right
<<		indent line one sw left
>%		indent a block with () {} (cursor on brace)
>ib		indent inner block with ()
>at		indent a block with <> tags
3==		re-indent 3 lines
=%		re-indent block (cursor on brace)
=iB		re-indent block with {}
]p		paste and adjust indent to current line


Window movement
:sp[lit] f		open f in a split window
:vs[plit] f		open f in a vertical split
Ctrl+ws			split window
Ctrl+wv			split window vertically
Ctrl+ww			switch to next window
Ctrl+wq			quit a window
Ctrl+wx			switch the places of current and next window
Ctrl+w=			make all windows equal size
Ctrl+w[hjkl]	switch active window to direction
Ctrl+w[HJKL]	move current window to left/bottom/top/right

Macros
qa	record macro a
q	stop recording macro
@a	run macro a
@@	rerun last macro

Cut and paste
yy		yank (copy) line
yw		yank word
yiw		yank word under cursor
yaw		yank word under cursor including next whitespace
Y		yank to end of line
p		put (paste)	after cursor
P		put before cursor
gp		put after cursor and leave cursor after the new text
gP		put before cursor and leave cursor after the new text
x		delete (cut) character
D		delete to the end of line
dd		delete a line
dw		delete word
diw		delete word under cursor
daw		delete word under cursor including next whitespace
:3,5d	delete lines 3, 4 and 5

:g/foo/d	delete all lines containing foo
:g!/foo/d	delete all liens not containing foo


Registers
:reg	show register content
"xy		yank to register x
"xp		paste from register x
"+y		yank to system clipboard
"+p		paste from system clipboard

Special registers
0	last yank
" 	unnamed register, last delete or yank
%	current file name
#	alternate file name
*	clipboard contents
+ 	clipboard contents
/	last search pattern
:	last command
.	last inserted text
-	last small delete
=	expression register
_	black hole register

Search syntax
:<address>s/foo/bar/
Address:
.		current line
x		line number x
.+x		current line number plus x lines
$		last line
/foo/	a line that contains foo
%		entire file

Search multiple files
:vim[grep] /pattern/ {`{file}`}
e.g. :vim[grep] /foo/ **/*

:cn		jump to next match
:cp		jump to previous match
:copen	open a window containing list of matches
:cclose	close the quickfix window

Movement
h	left 	(pointer finger)
j	down 	(pointer finger)
k	up		(middle finger)
l	right	(ring finger)
gj	down multi line
gk	up multi line
H	top of screen
M	middle of screen
L	bottom of screen
w	word forward (start)
W	word forward (start) incl. punctuation
e	word forward (end)
E	word forward (end) incl. punctuation
b	word backward (start)
B	word backward (start) incl. punctuation
ge	word backward (end)
gE	word backward (end) incl. punctuation
%	move to matching (), {}, []
0 	start of line
^	first non blank char
$	end of line
g_	last non-blank char of the line
gg	first line
G	last line
gd	move to local declaration
gD	move to global declaration
fx	next occurence of char x
tx 	before next occurence of char x
Fx	previous occurence of char x
Tx 	before previous occurence of char x
;	repeat previous f, t, F or T
,	repeat previous f, t, F or T backwards
}	next paragraph
{	previous paragraph
zz	center cursor on screen
zt	cursor to top
zb	cursor to bottom
Ctrl+e/y	move screen down/up one line


